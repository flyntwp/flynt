{% set themes = ['light', 'dark'] %}

<flynt-component name="BlockBaseStyle">
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h1>Base Style</h1>
      <p>This style guide exemplifies the base styles.</p>
      <p><strong>Creating a well thought out base style for a new website is one of the most critical parts to ensure an overall successful project progression.</strong></p>
      <p>The base style should contain all those basic HTML elements and their variations that will be needed within the website. May it be in standard formatted text, or within custom styled layout components.</p>
      <p>The goal is to abstract the element designs just to the right level, so that they can be used in any context without further modifications, but to keep them flexible enough for custom adjustments when needed, without having to overwrite many CSS attributes.</p>
      <p>The following markup is a best practice starting point to help you focus on what's important. It does not include all HTML elements and other elements will still work, only without further customization.</p>
      <ol id="table-of-contents">
        <li><a href="#colors">Colors</a></li>
        <li><a href="#typography">Typography</a></li>
        <li><a href="#buttons-and-links">Buttons and Links</a></li>
        <li><a href="#forms">Forms</a></li>
        <li><a href="#helpers">Helpers</a></li>
        <li><a href="#themes">Themes</a>
          <ol>
            {% for theme in themes %}
              <li><a href="#theme-{{ theme }}">Theme {{ theme|capitalize }}</a></li>
            {% endfor %}
            <li><a href="#theme-reset">Theme Reset</a></li>
          </ol>
        </li>
      </ol>
    </div>
  </section>
  <div class="centerMaxWidthContainer"><hr class="centerContentMaxWidth"></div>

  <!-- 1. Colors -->
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h2 id="colors">1. Colors <a href="#colors" aria-label="Link to Colors">#</a></h2>
      <p>A strong selection of colors is essential for any website. Using CSS color variables provide a consistent and efficient way to incorporate color into the design while it is easy to make global changes.</p>
      {% include 'Partials/_tableColors.twig' %}
    </div>
  </section>
  <hr class="centerContentMaxWidth">

  <!-- 2. Typography -->
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h2 id="typography">2. Typography <a href="#typography" aria-label="Link to Typography">#</a></h2>
      <p>By default elements <u>doesn’t</u> have any white-space between (as result of the css reset). Using the <a href="#helpers">helper class</a> <code>.flowContent</code> in combination with a css variable gets rid of them and creates a smooth flow rhythm between elements. Just use the css variable <code>--flow-space</code> and let it flow.</p>
      {% include 'Partials/_typographyExamples.twig' %}
    </div>
  </section>
  <hr class="centerContentMaxWidth">

  <!-- 3. Buttons and Links -->
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h2 id="buttons-and-links">3. Buttons and Links <a href="#buttons-and-links" aria-label="Link to Buttons and Links">#</a></h2>
      <p>A <strong>&lt;button&gt;</strong> element without a class should have its styles reset, so it can be used as a semantic tag on other interface elements, like the arrows of a slider, a closing × or a burger menu.</p>
      <p>Using the anchor element (<strong>&lt;a&gt;</strong>) as a button is common for a “call to action”. Anchor elements as <a href="https://www.google.com/search?q=HTML+Links" target="_blank">regular Link</a> are nearly on all over the internet.</p>
      {% include 'Partials/_buttonsAndLinks.twig' %}
    </div>
  </section>
  <hr class="centerContentMaxWidth">

  <!-- 4. Forms -->
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h2 id="forms">4. Forms <a href="#forms" aria-label="Link to Forms">#</a></h2>
      <p>Placing form elements on a page should just work without having to apply extra classes or custom wrapping elements. However, a <strong>&lt;fieldset&gt;</strong> element provides a nice opportunity to group multiple form elements.</p>
      {% include 'Partials/_inputs.twig' %}
    </div>
  </section>
  <div class="centerMaxWidthContainer"><hr class="centerContentMaxWidth"></div>

  <!-- 5. Helpers -->
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h2 id="helpers">5. Helpers <a href="#helpers" aria-label="Link to Helpers">#</a></h2>
      <p>The Base Style includes some global CSS layout classes which help ensure a consistent appearance across components:</p>
      <ul class="flowContent">
        <li><code>.componentSpacing</code><br>Ensures consistent component top and bottom spacing.</li>
        <li><code>.centerMaxWidthContainer</code><br>Ensures consistent left and right padding and website max width.</li>
        <li><code>.centerContentMaxWidth</code><br>Ensures an optimal readability of text contents (optimal line length for text is between 50 and 75 characters).</li>
        <li><code>.flowContent</code><br>Ensures adds margin to child sibling elements, mostly perfect for flowing texts. For a closer examination of how it works, take a look at the <a href="#typography">2.&nbsp;Typography</a> section.</li>
        <li><code>.preContent</code><br>Ensures consistent positioning of content preceding the main section of a component.</li>
        <li><code>.postContent</code><br>Ensures consistent positioning of content following the main section of a component.</li>
        <li><code>.scrollableTableWrapper</code><br>Wrapping a table with a container element with this class makes the table scrollable on smaller screen sizes.</li>
        <li><code>.visuallyHidden</code><br>Visually hides text in a way that screen readers will still read it.</li>
      </ul>
      <div class="boxBorder boxPadding">
        <h3>Box Helpers</h3>
        <p>Box helper classes can be used alone or in combination to ensure consistent styling across components and easily create “cards”.</p>
        <ul>
          <li>Using the class <code>.boxBorder</code> allows you to consistently add borders.</li>
          <li>Using the class <code>.boxPadding</code> allows you to consistently style any content container as a responsive padding box.</li>
        </ul>
      </div>
    </div>
  </section>
  <div class="centerMaxWidthContainer"><hr class="centerContentMaxWidth"></div>

  <!-- 6. Themes -->
  <section class="centerMaxWidthContainer componentSpacing">
    <div class="flowContent centerContentMaxWidth">
      <h2 class="h1" id="themes">6. Themes <a href="#themes" aria-label="Link to Themes">#</a></h2>
      <p>To easily change the appearance of a group of content, using themes is a reliable method. The <code>data-theme</code> attribute makes it simple to apply styles and customize the appearance of a group of content, while the code keeps readable.</p>
    </div>
  </section>
  {% for theme in themes %}
    <section data-theme="{{ theme }}" class="componentSpacing">
      <div class="centerMaxWidthContainer">
        <div class="flowContent centerContentMaxWidth">
          <h3 class="h2" id="theme-{{ theme }}">Theme {{ theme|capitalize }} <a href="#theme-{{ theme }}" aria-label="Link to Theme {{ theme|capitalize }}">#</a></h3>
          <p>Using the attribute <code>data-theme="{{ theme }}"</code> allows you to style a group content as Theme {{ theme|capitalize }}.</p>
          {% include 'Partials/_theme.twig' with { 'theme': theme } only %}
        </div>
      </div>
    </section>
  {% endfor %}
  <section data-theme="{{ themes[0] }}" class="componentSpacing">
    <div class="centerMaxWidthContainer">
      <div class="flowContent centerContentMaxWidth boxPadding" data-theme="reset">
        <h3 class="h2" id="theme-reset">Theme Reset <a href="#theme-reset" aria-label="Link to Theme Reset">#</a></h3>
        <p>Using the attribute <code>data-theme="reset"</code> allows you to revert the styles of a parent theme back to the initial styles.</p>
        {% include 'Partials/_theme.twig' with {'theme': 'reset'} only %}
      </div>
    </div>
  </section>
</flynt-component>
