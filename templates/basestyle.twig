{% extends 'templates/_document.twig' %}

{% block content %}
  {% set themes = ['light', 'dark'] %}

  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h1>Base Style</h1>
      <p>This style guide exemplifies the base styles.</p>
      <p><strong>Creating a well thought out base style for a new website is one of the most critical parts to ensure an overall successful project progression.</strong></p>
      <p>The base style should contain all those basic HTML elements and their variations that will be needed within the website. May it be in standard formatted text, or within custom styled layout components.</p>
      <p>The goal is to abstract the element designs just to the right level, so that they can be used in any context without further modifications, but to keep them flexible enough for custom adjustments when needed, without having to overwrite many CSS attributes.</p>
      <p>The following markup is a best practice starting point to help you focus on what's important. It does not include all HTML elements and other elements will still work, only without further customization.</p>
      <ol id="table-of-contents">
        <li><a href="#colors">Colors</a></li>
        <li><a href="#typography">Typography</a></li>
        <li><a href="#buttons-and-links">Buttons and Links</a></li>
        <li><a href="#forms">Forms</a></li>
        <li><a href="#helpers">Helpers</a></li>
        <li><a href="#themes">Themes</a>
          <ol>
            {% for theme in themes %}
              <li><a href="#theme-{{ theme }}">Theme {{ theme|capitalize }}</a></li>
            {% endfor %}
            <li><a href="#theme-reset">Theme Reset</a></li>
          </ol>
        </li>
      </ol>
    </div>
  </section>
  <div class="container"><hr data-size="medium" data-align="center"></div>

  <!-- 1. Colors -->
  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h2 id="colors">1. Colors <a href="#colors" aria-label="Link to Colors">#</a></h2>
      <p>A strong selection of colors is essential for any website. Using CSS color variables provide a consistent and efficient way to incorporate color into the design while it is easy to make global changes.</p>
      {% block blockTableColors %}
        <div class="scrollableTableWrapper">
          <table>
            <caption>Additionally demonstrates how tables typically appear</caption>
            <thead>
              <tr>
                <th scope="col">Example</th>
                <th scope="col">CSS variable</th>
                <th scope="col">Usage</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row" style="background: var(--color-accent);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-accent</td>
                <td>Highlight elements or draw attention (e.g. Links or Buttons)</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-background);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-background</td>
                <td>Element Backgrounds</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-background-secondary);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-background-secondary</td>
                <td>More contrasted Element Backgrounds (e.g. inside Table Rows)</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-border);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-border</td>
                <td>Element Borders (e.g. Tables or Cards)</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-border-secondary);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-border-secondary</td>
                <td>More contrasted Element Borders (e.g. inputs)</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-text);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-text</td>
                <td>Texts and Elements</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-text-muted);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-text-muted</td>
                <td>Subtle Texts or Elements (e.g. Captions and Table Headers)</td>
              </tr>
              <tr>
                <th scope="row" style="background: var(--color-error);"><span class="visuallyHidden">Color example</span></th>
                <td>--color-error</td>
                <td>Indicate errors (e.g. on inputs)</td>
              </tr>
            </tbody>
          </table>
        </div>
      {% endblock %}
    </div>
  </section>
  <div class="container"><hr data-size="medium" data-align="center"></div>

  <!-- 2. Typography -->
  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h2 id="typography">2. Typography <a href="#typography" aria-label="Link to Typography">#</a></h2>
      <p>Using the css variable <code>--flow-space</code> creates a smooth flow rhythm between elements.</p>
      {% block blockTypography %}
        <h3 class="h1">H1: The quick brown fox jumps over the lazy dog</h3>
        <h3 class="h2">H2: The quick brown fox jumps over the lazy dog</h3>
        <h3>H3: The quick brown fox jumps over the lazy dog</h3>
        <h3 class="h4">H4: The quick brown fox jumps over the lazy dog</h3>
        <h3 class="h5">H5: The quick brown fox jumps over the lazy dog</h3>
        <h3 class="h6">H6: The quick brown fox jumps over the lazy dog</h3>
        <p>Paragraph: The quick brown fox jumps over the lazy dog</p>
        <p><label>Label: The quick brown fox jumps over the lazy dog</label></p>
        <p><figcaption>Caption: The quick brown fox jumps over the lazy dog</figcaption></p>
        <p>Paragraphs can contain any number of words or other elements. It can also contain <a href="https://www.google.com/search?q=HTML+Links" target="_blank">links</a>, <strong>bold</strong>, <em>italic</em>, <u>underline</u>, <s>strikethrough</s>, <sub>sub</sub>, <sup>sup</sup>, <small>small</small> <abbr title="Abbreviation">abbr.</abbr>, <mark>highlighted</mark>, <kbd>kbd</kbd>, <code>code</code> or other inline elements.</p>
        <p>This paragraph is a placeholder and it can be skipped. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sit amet venenatis urna cursus. Amet nulla facilisi morbi tempus iaculis urna id volutpat lacus.</p>
        <blockquote>
          <p>“Base styling is done, when this page has a custom look and is visually structured so that all elements, their relationships, meanings and hierarchy are recognizable.”</p>
          <footer><cite>— a mysterious web developer</cite></footer>
        </blockquote>
        <p>This paragraph is a placeholder and it can be skipped. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sit amet venenatis urna cursus. Amet nulla facilisi morbi tempus iaculis urna id volutpat lacus.</p>
        <figure>
          <img width="768" height="512" src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' %3E%3Crect width='100%25' height='100%25' fill='%23ddd' /%3E%3Ctext x='50%25' y='50%25' alignment-baseline='middle' text-anchor='middle' fill='%23303030cc' font-size='30' font-family='sans-serif'%3E3:2 ratio%3C/text%3E%3C/svg%3E" alt="Placeholder">
          <figcaption>A caption for the image</figcaption>
        </figure>
        <h3>Lists</h3>
        <p>Make sure you’re not resetting all list elements, because that might come in handy for styling other layout elements, but remain their purpose for formatted text.</p>
        <h4>What you need to consider?</h4>
        <ul>
          <li>What’s the margin and padding of the list?</li>
          <li>Which list style is the default?</li>
          <li>Will there be custom list style icons like:
            <ol>
              <li>stars</li>
              <li>checkmarks</li>
              <li>colored bullets or list numbers</li>
            </ol>
          </li>
          <li>Nested list styles should have a different look.
            <ul>
              <li>The user agent stylesheet does that already.</li>
              <li>So custom styled lists should consider it as well.</li>
              <li>An option might be to only specifically style the top level list style icon to keep the browser defaults for nesting.</li>
            </ul>
          </li>
          <li>Also remember to test multiline list items like the one above.</li>
        </ul>
      {% endblock %}
    </div>
  </section>
  <div class="container"><hr data-size="medium" data-align="center"></div>

  <!-- 3. Buttons and Links -->
  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h2 id="buttons-and-links">3. Buttons and Links <a href="#buttons-and-links" aria-label="Link to Buttons and Links">#</a></h2>
      <p>A <strong>&lt;button&gt;</strong> element without a class should have its styles reset, so it can be used as a semantic tag on other interface elements, like the arrows of a slider, a closing × or a burger menu.</p>
      <p>Using the anchor element (<strong>&lt;a&gt;</strong>) as a button is common for a “call to action”. Anchor elements as <a href="https://www.google.com/search?q=HTML+Links" target="_blank">regular Link</a> are nearly on all over the internet.</p>
      <p>Displaying buttons side by side is a common pattern. The <code>.groupContainer</code> class is a helper to achieve that.</p>
      {% block blockButtonsAndLinks %}
        <p class="groupContainer">
          <button type="button" class="button">Button</button>
          <button type="button" class="button button--outlined">Button outlined</button>
        </p>
        <p class="groupContainer">
          <button type="button" class="button" disabled>Button disabled</button>
          <button type="button" class="button button--outlined" disabled>Button outlined disabled</button>
        </p>
        <p class="groupContainer">
          <button class="button button--text">Button Text</button>
          <button class="button button--text" disabled>Button Text disabled</button>
        </p>
        <p class="groupContainer">
          <a class="button" href="https://www.google.com/search?q=HTML+Links" target="_blank">Link as Button</a>
          <a class="button button--outlined" href="https://www.google.com/search?q=HTML+Links" target="_blank">Link as Button outlined</a>
        </p>
        <p>
          <a class="button button--text" href="https://www.google.com/search?q=HTML+Links" target="_blank">Link as Button Text</a>
        </p>
        <p>
          <a href="https://www.google.com/search?q=HTML+Links" target="_blank">Regular Link</a>
        </p>
      {% endblock %}
    </div>
  </section>
  <div class="container"><hr data-size="medium" data-align="center"></div>

  <!-- 4. Forms -->
  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h2 id="forms">4. Forms <a href="#forms" aria-label="Link to Forms">#</a></h2>
      <p>Placing form elements on a page should just work without having to apply extra classes or custom wrapping elements. However, a <strong>&lt;fieldset&gt;</strong> element provides a nice opportunity to group multiple form elements.</p>
      {% block blockInputs %}
        {% set form_id = function('wp_generate_uuid4') %}
        <fieldset>
          <label for="textInput-{{ form_id }}">Text Input</label><br>
          <input id="textInput-{{ form_id }}" type="text" name="text" size="30" placeholder="Placeholder">
          <br><br>
          <label for="textInput-{{ form_id }}-2">Text Input Disabled</label><br>
          <input id="textInput-{{ form_id }}-2" type="text" name="text" size="30" placeholder="Placeholder" disabled>
          <br><br>
          <label for="textInput-{{ form_id }}-3">Text Input Filled Invalid</label><br>
          <input id="textInput-{{ form_id }}-3" type="text" name="text" size="30" placeholder="Placeholder" pattern="[0-9]*" value="Only Numbers are valid"><br>
          <br>
          <label for="textarea-{{ form_id }}">Your message</label><br>
          <textarea id="textarea-{{ form_id }}" placeholder="Placeholder"></textarea>
          <br><br>
          <label class="visuallyHidden" for="selectInput-{{ form_id }}">Select Input</label>
          <select id="selectInput-{{ form_id }}" name="select">
            <option value="select-value-{{ form_id }}-1">Select Option #1</option>
            <option value="select-value-{{ form_id }}-2">Select Option #2</option>
            <option value="select-value-{{ form_id }}-3">Select Option #3</option>
          </select>
        </fieldset>

        <p>The user agent stylesheet typically has a very weird <b>&lt;fieldset&gt;</b> and <b>&lt;legend&gt;</b> styling. But hey: why not customize it to our needs?!</p>
        <fieldset>
          <legend>Checkbox Inputs</legend>
          <input type="checkbox" id="checkbox-{{ form_id }}-1" required>
          <label for="checkbox-{{ form_id }}-1">Checkbox Label #1<sup>*</sup></label>
          <input type="checkbox" id="checkbox-{{ form_id }}-2">
          <label for="checkbox-{{ form_id }}-2">Checkbox Item #2 using <strong>Multiline content</strong> that takes over multiple lines. Lorem ipsum dolor sit amet, <a href="#table-of-contents">consectetur</a> adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</label>
          <input type="checkbox" id="checkbox-{{ form_id }}-3">
          <label for="checkbox-{{ form_id }}-3">Checkbox Label #3</label>
        </fieldset>

        <fieldset>
          <legend>Radio Inputs</legend>
          <input type="radio" id="radio-{{ form_id }}-1" name="radio-group">
          <label for="radio-{{ form_id }}-1">Radio Label #1</label>
          <input type="radio" id="radio-{{ form_id }}-2" name="radio-group">
          <label for="radio-{{ form_id }}-2">Radio Item #2 using <strong>Multiline content</strong> that takes over multiple lines. Lorem ipsum dolor sit amet, <a href="#table-of-contents">consectetur</a> adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</label>
          <input type="radio" id="radio-{{ form_id }}-3" name="radio-group">
          <label for="radio-{{ form_id }}-3">Radio Label #3</label>
        </fieldset>
      {% endblock %}
    </div>
  </section>
  <div class="container"><hr data-size="medium" data-align="center"></div>

  <!-- 5. Helpers -->
  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h2 id="helpers">5. Helpers <a href="#helpers" aria-label="Link to Helpers">#</a></h2>
      <p>To ensure a consistent appearance across all components, it is important to use helper classes for specific tasks.</p>
      <p>Keep in mind: <strong>A&nbsp;helper class should do one job and does it well.</strong></p>
      <ul>
        <li><code>.componentSpacing</code><br>Ensures consistent component top and bottom spacing.</li>
        <li><code>.container</code><br>Ensures consistent left and right padding and website max width.</li>
        <li><code>.groupContainer</code><br>Ensures consistent spacing between elements inside the container.</li>
        <li><code>.scrollableTableWrapper</code><br>Wrapping a table with a container element with this class makes the table scrollable on smaller screen sizes.</li>
        <li><code>.visuallyHidden</code><br>Visually hides text in a way that screen readers will still read it.</li>
      </ul>
      {% block blockBoxHelpers %}
        <div class="boxBorder boxPadding">
          <h3>Box Helpers</h3>
          <p>Box helper classes can be used alone or in combination to ensure consistent styling across components and easily create “cards”.</p>
          <ul>
            <li>Using the class <code>.boxBorder</code> allows you to consistently add borders.</li>
            <li>Using the class <code>.boxPadding</code> allows you to consistently style any content container as a responsive padding box.</li>
          </ul>
        </div>
      {% endblock %}
    </div>
  </section>
  <div class="container"><hr data-size="medium" data-align="center"></div>

  <!-- 6. Themes -->
  <section class="container componentSpacing">
    <div data-size="medium" data-align="center">
      <h2 class="h1" id="themes">6. Themes <a href="#themes" aria-label="Link to Themes">#</a></h2>
      <p>To easily change the appearance of a group of content, using themes is a reliable method. The <code>data-theme</code> attribute makes it simple to apply styles and customize the appearance of a group of content, while the code keeps readable.</p>
    </div>
  </section>
  {% for theme in themes %}
    <section data-theme="{{ theme }}" class="componentSpacing">
      <div class="container">
        <div data-size="medium" data-align="center">
          <details>
            <summary class="h2">
              <h3 class="h2" style="display: inline-block" id="theme-{{ theme }}">Theme {{ theme|capitalize }} <a href="#theme-{{ theme }}" aria-label="Link to Theme {{ theme|capitalize }}">#</a></h3>
            </summary>
            <p>Using the attribute <code>data-theme="{{ theme }}"</code> allows you to style a group content as Theme {{ theme|capitalize }}.</p>
              <ol>
                <li><a href="#theme-{{ theme }}-colors">Colors</a></li>
                <li><a href="#theme-{{ theme }}-typography">Typography</a></li>
                <li><a href="#theme-{{ theme }}-buttons-and-links">Buttons and Links</a></li>
                <li><a href="#theme-{{ theme }}-forms">Forms</a></li>
                <li><a href="#theme-{{ theme }}-helpers">Helpers</a></li>
              </ol>
              <hr>
              <h2 id="theme-{{ theme }}-colors">1. Colors <a href="#theme-{{ theme }}-colors" aria-label="Link to Theme {{ theme|capitalize }} Colors">#</a></h2>
              {{ block('blockTableColors') }}
              <hr>
              <h2 id="theme-{{ theme }}-typography">2. Typography <a href="#theme-{{ theme }}-typography" aria-label="Link to Theme {{ theme|capitalize }} Typography">#</a></h2>
              {{ block('blockTypography') }}
              <hr>
              <h2 id="theme-{{ theme }}-buttons-and-links">3. Buttons and Links <a href="#theme-{{ theme }}-buttons-and-links" aria-label="Link to Theme {{ theme|capitalize }} Buttons and Links">#</a></h2>
              {{ block('blockButtonsAndLinks') }}
              <hr>
              <h2 id="theme-{{ theme }}-forms">4. Forms <a href="#theme-{{ theme }}-forms" aria-label="Link to Theme {{ theme|capitalize }} Forms">#</a></h2>
              {{ block('blockInputs') }}
              <h2 id="theme-{{ theme }}-helpers">5. Helpers <a href="#theme-{{ theme }}-helpers" aria-label="Link to Theme {{ theme|capitalize }} Forms">#</a></h2>
              {{ block('blockBoxHelpers') }}
            </details>
        </div>
      </div>
    </section>
  {% endfor %}
  <!-- Theme Reset -->
  <section data-theme="{{ themes[0] }}" class="componentSpacing">
    <div class="container">
      <div data-size="medium" data-align="center">
        <details>
          <summary class="h2 boxPadding" data-theme="reset">
            <h3 class="h2" style="display: inline-block" id="theme-reset">Theme Reset <a href="#theme-reset" aria-label="Link to Theme Reset">#</a></h3>
          </summary>
          <div class="boxPadding" style="margin-block-start: 0" data-theme="reset">
            <p>Using the attribute <code>data-theme="reset"</code> allows you to revert the styles of a parent theme back to the initial styles.</p>
            {% set theme = 'reset' %}
            <ol>
              <li><a href="#theme-{{ theme }}-colors">Colors</a></li>
              <li><a href="#theme-{{ theme }}-typography">Typography</a></li>
              <li><a href="#theme-{{ theme }}-buttons-and-links">Buttons and Links</a></li>
              <li><a href="#theme-{{ theme }}-forms">Forms</a></li>
              <li><a href="#theme-{{ theme }}-helpers">Helpers</a></li>
            </ol>
            <hr>
            <h2 id="theme-{{ theme }}-colors">1. Colors <a href="#theme-{{ theme }}-colors" aria-label="Link to Theme {{ theme|capitalize }} Colors">#</a></h2>
            {{ block('blockTableColors') }}
            <hr>
            <h2 id="theme-{{ theme }}-typography">2. Typography <a href="#theme-{{ theme }}-typography" aria-label="Link to Theme {{ theme|capitalize }} Typography">#</a></h2>
            {{ block('blockTypography') }}
            <hr>
            <h2 id="theme-{{ theme }}-buttons-and-links">3. Buttons and Links <a href="#theme-{{ theme }}-buttons-and-links" aria-label="Link to Theme {{ theme|capitalize }} Buttons and Links">#</a></h2>
            {{ block('blockButtonsAndLinks') }}
            <hr>
            <h2 id="theme-{{ theme }}-forms">4. Forms <a href="#theme-{{ theme }}-forms" aria-label="Link to Theme {{ theme|capitalize }} Forms">#</a></h2>
            {{ block('blockInputs') }}
            <h2 id="theme-{{ theme }}-helpers">5. Helpers <a href="#theme-{{ theme }}-helpers" aria-label="Link to Theme {{ theme|capitalize }} Forms">#</a></h2>
            {{ block('blockBoxHelpers') }}
          </div>
        </details>
      </div>
    </div>
  </section>
{% endblock %}
